#!/usr/bin/env python
#
# Extract video clips from a kdenlive project file.
#
#	kdenclip project.kdenlive
#	kdenclip project.kdenlive output/path/
#

from bs4 import BeautifulSoup
import re
import subprocess
import os


def main():
	import argparse

	parser = argparse.ArgumentParser(description='Extract video clips from a kdenlive project file.')
	parser.add_argument('infile', action="store", help='Kdenlive project file to extract clips from')
	parser.add_argument('-o', '--outfile', action="store", default='.', help='Directory to save extracted clips')

	args = parser.parse_args()
	print(args)

	# TODO: handle errors
#	os.path.exists(infile)
#	os.path.exists(outfile)

	ExtractClips( args.infile, args.outfile )

	return
	
	
	
	
def ExtractClips( inFileName, outPath ):

	# Soupify XML
	soup = BeautifulSoup(open(inFileName))

	# Parse framerate
	frameRate = float(soup.profile['frame_rate_num'])
#	print(frameRate)
	# TODO: check that frameRate was parsed properly

	# Parse clip data from kdenlive project file
	clips = [];
	#producers = soup.find_all'kdenlive_producer')
	for producer in soup.find_all('kdenlive_producer'):
	#	print(producer)

		producerID=producer['id']	
		name=producer['name']
		resource=producer['resource']
		
	#	print(producerID, name, resource)

		# kdenlive identifies producers as <clipid>_<track> or just <clipid> when on first track
		regex = "^%s_|^%s$" % (producerID,producerID)
		for clip in soup.find_all('entry',producer=re.compile(regex)):

	#		print(clip)
			
			startFrame=int(clip['in'])
			endFrame=int(clip['out'])
			startSeconds=startFrame/frameRate
			endSeconds=endFrame/frameRate
			durationFrames=endFrame-startFrame
			durationSeconds=endSeconds-startSeconds
			
			outFileName="%d-%d-%s" % (int(startSeconds), int(endSeconds), name)
			outFileNamePath=os.path.join(outPath,outFileName)
			ffmpegCommandLine=['ffmpeg','-i',resource,'-ss','%0.3f' % startSeconds,'-t','%0.3f' % durationSeconds,'-c','copy',outFileNamePath] 

			clips.append({'id':producerID, 'name':name, 'resource':resource, 'startFrame':startFrame, 'endFrame':endFrame, 'durationFrames':durationFrames, 'startSeconds':startSeconds, 'endSeconds':endSeconds, 'durationSeconds':durationSeconds, 'ffmpegCommandLine':ffmpegCommandLine })


	# Execute ffmpeg commmands
	errorCount = 0
	for clip in clips:
	#	print(clip['ffmpegCommandLine'])
		proc=subprocess.Popen(clip['ffmpegCommandLine'])
		proc.wait()
		if( proc.returncode != 0 ):
			errorCount += 1;

	# Report on completion
	print("\n**************************************************")
	print("Finished extracting clips from %s" % inFileName)
	print("  %d clip operations performed" % len(clips))
	print("  %d errors occured" % errorCount)
	print("**************************************************")


if __name__ == "__main__":
    main()
